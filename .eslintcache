[{"/Users/maclean/Developer/projects/react/chatteree/src/index.tsx":"1","/Users/maclean/Developer/projects/react/chatteree/src/features/counter/Counter.tsx":"2","/Users/maclean/Developer/projects/react/chatteree/src/App.tsx":"3","/Users/maclean/Developer/projects/react/chatteree/src/pages/signup/Signup.tsx":"4","/Users/maclean/Developer/projects/react/chatteree/src/serviceWorker.ts":"5","/Users/maclean/Developer/projects/react/chatteree/src/features/counter/counterSlice.ts":"6","/Users/maclean/Developer/projects/react/chatteree/src/components/input/Input.tsx":"7","/Users/maclean/Developer/projects/react/chatteree/src/app/store.ts":"8","/Users/maclean/Developer/projects/react/chatteree/src/pages/confirmPhoneNumber/ConfirmPhoneNumber.tsx":"9","/Users/maclean/Developer/projects/react/chatteree/src/components/otp/otp.tsx":"10","/Users/maclean/Developer/projects/react/chatteree/src/pages/createId/CreateId.tsx":"11","/Users/maclean/Developer/projects/react/chatteree/src/pages/profileSetup/profileSetup.tsx":"12"},{"size":648,"mtime":1610368860250,"results":"13","hashOfConfig":"14"},{"size":1626,"mtime":1610308080118,"results":"15","hashOfConfig":"14"},{"size":735,"mtime":1611851931431,"results":"16","hashOfConfig":"14"},{"size":2177,"mtime":1611858367610,"results":"17","hashOfConfig":"14"},{"size":5424,"mtime":1610308080119,"results":"18","hashOfConfig":"14"},{"size":1851,"mtime":1610308080118,"results":"19","hashOfConfig":"14"},{"size":637,"mtime":1610466693879,"results":"20","hashOfConfig":"14"},{"size":414,"mtime":1610308080117,"results":"21","hashOfConfig":"14"},{"size":2329,"mtime":1611852377397,"results":"22","hashOfConfig":"14"},{"size":2791,"mtime":1610466803561,"results":"23","hashOfConfig":"14"},{"size":1777,"mtime":1611852410440,"results":"24","hashOfConfig":"14"},{"size":2227,"mtime":1611858431063,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qkpkto",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/maclean/Developer/projects/react/chatteree/src/index.tsx",[],"/Users/maclean/Developer/projects/react/chatteree/src/features/counter/Counter.tsx",[],"/Users/maclean/Developer/projects/react/chatteree/src/App.tsx",[],"/Users/maclean/Developer/projects/react/chatteree/src/pages/signup/Signup.tsx",[],"/Users/maclean/Developer/projects/react/chatteree/src/serviceWorker.ts",[],"/Users/maclean/Developer/projects/react/chatteree/src/features/counter/counterSlice.ts",[],"/Users/maclean/Developer/projects/react/chatteree/src/components/input/Input.tsx",[],"/Users/maclean/Developer/projects/react/chatteree/src/app/store.ts",[],"/Users/maclean/Developer/projects/react/chatteree/src/pages/confirmPhoneNumber/ConfirmPhoneNumber.tsx",[],"/Users/maclean/Developer/projects/react/chatteree/src/components/otp/otp.tsx",["52","53","54"],"import { debug } from 'console';\nimport React, { useEffect, useState, createRef } from 'react';\nimport style from './otp.module.scss';\n\ninterface otpProps {\n    value: string;\n    onChange: (event: React.FormEvent<HTMLInputElement>) => void\n}\n\n// function singleInput() {\n\n// }\n\nexport default function Otp(props: otpProps) {\n    const [data, setData] = useState(\"\");\n\n    const textInput1 = createRef<HTMLInputElement>();\n    const textInput2 = createRef<HTMLInputElement>();\n    const textInput3 = createRef<HTMLInputElement>();\n    const textInput4 = createRef<HTMLInputElement>();\n    const textInput5 = createRef<HTMLInputElement>();\n    const textInput6 = createRef<HTMLInputElement>();\n\n    // useMemo(() => function, input)\n    const refArray = [\n        textInput1, textInput2, textInput3, textInput4, textInput5, textInput6\n    ]\n\n    function handleInputChange(event: React.FormEvent<HTMLInputElement>) {\n        \n\n        const val = (event.currentTarget.value as string)\n        if (data.length < 6) {\n            setData(data.concat(val))\n        }\n        let newEvent = event\n        newEvent.currentTarget.value = data\n        props.onChange(newEvent)\n    }\n    \n    function handleKeyDown(event: React.KeyboardEvent) {\n        if (event.key === \"Backspace\") {\n            // debugger\n            setData(data.slice(0, -1))\n\n        }\n    }\n\n    useEffect(() => {\n        if (data.length < 6) {\n            refArray[data.length].current?.focus()\n        }\n    }, [data, refArray])\n\n    \n\n    const inputs = []\n\n    for (let i = 0; i< 6; i++) {\n        inputs.push(\n            <input\n            key={i} \n            // type=\"text\" \n            className=\" h-16 bg-fade w-14 rounded-md outline-none text-center\" \n            value={data[i] || ''}\n            onChange={handleInputChange}\n            ref = {refArray[i]}\n            onKeyDown={handleKeyDown}\n        />\n        )\n    }\n\n\n    return <>\n    <div className={style.otp}>\n        <div className=\"flex justify-between\">\n            {\n                inputs\n            }\n        </div>\n    </div>\n    </>\n}\n\n\n// interface otpProps {\n//     value: string;\n//     onChange: (event: React.FormEvent<HTMLInputElement>) => void\n// }\n\ninterface inputProps {\n    value: string;\n    onChange: (event: React.FormEvent<HTMLInputElement>) => void\n    onKeyDown: (event: React.KeyboardEvent) => void\n}\n\nfunction SingleInput(props: inputProps) {\n\n    function handleInputChange(event: React.FormEvent<HTMLInputElement>) {\n        props.onChange(event)\n    }\n\n    function handleKeyDown(event: React.KeyboardEvent) {\n        props.onKeyDown(event)\n    }\n    return (\n        <input\n        type=\"text\" \n        className=\" h-16 bg-fade w-14\" \n        onChange={handleInputChange}\n        onKeyDown={handleKeyDown}\n    />\n    )\n}","/Users/maclean/Developer/projects/react/chatteree/src/pages/createId/CreateId.tsx",["55"],"import React, { useState } from 'react';\nimport {useHistory} from 'react-router-dom'\nimport logo from '../../assets/images/svg/logo.svg'\nimport Input from '../../components/input/Input';\nimport styles from './CreateId.module.scss'\n\n\nexport default function CreateId() {\n    const [id, setId] = useState(\"\")\n\n    function handleInputChange(event: React.FormEvent<HTMLInputElement>) {\n        setId(event.currentTarget.value)\n    }\n\n    function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n        event.preventDefault()\n        window.location.href = \"/setup-profile\"\n    }\n    return <>\n    <main className=\"flex justify-center\">\n        <section className={styles.container}>\n            <img src={logo} alt=\"logo\"/>\n            <h1 className=\"text-heading mt-6\">\n                A Chatteree ID cos you are special\n            </h1>\n            <p className=\"mt-4 text-body-regular text-oslo-gray block\">\n                People will be able to find you with your unique ID\n            </p>\n            <form onSubmit={handleSubmit}>\n                <label htmlFor=\"\" className=\"text-subtext text-oslo-gray block mb-1 mt-10\">\n                    Chatteree ID\n                </label>\n                <Input \n                    id=\"chattereeId\"\n                    value={id}\n                    onChange={handleInputChange} />\n                {/* <p className=\"text-body-bold mt-8\">Suggestions</p> */}\n                <button \n                    type=\"submit\"\n                    value=\"Submit\"\n                    className=\"h-11 bg-black-pearl rounded-full \n                    text-yellow px-6 text-body-bold float-right mt-6\">\n                    Continue\n                </button>\n                \n            </form>\n        </section>\n    </main>\n    </>\n}","/Users/maclean/Developer/projects/react/chatteree/src/pages/profileSetup/profileSetup.tsx",[],{"ruleId":"56","severity":1,"message":"57","line":1,"column":10,"nodeType":"58","messageId":"59","endLine":1,"endColumn":15},{"ruleId":"60","severity":1,"message":"61","line":25,"column":11,"nodeType":"62","endLine":27,"endColumn":6},{"ruleId":"56","severity":1,"message":"63","line":97,"column":10,"nodeType":"58","messageId":"59","endLine":97,"endColumn":21},{"ruleId":"56","severity":1,"message":"64","line":2,"column":9,"nodeType":"58","messageId":"59","endLine":2,"endColumn":19},"@typescript-eslint/no-unused-vars","'debug' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","The 'refArray' array makes the dependencies of useEffect Hook (at line 53) change on every render. To fix this, wrap the initialization of 'refArray' in its own useMemo() Hook.","VariableDeclarator","'SingleInput' is defined but never used.","'useHistory' is defined but never used."]